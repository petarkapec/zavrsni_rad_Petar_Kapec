-- Kreiranje osnovnih tipova ako je potrebno
CREATE TYPE uloga_enum AS ENUM ('Organizator', 'Naručitelj');
CREATE TYPE kategorija_enum AS ENUM ('Rekviziti', 'Catering', 'Piće', 'Usluga', 'Prostor');
CREATE TYPE status_placanja_enum AS ENUM ('Nije plaćeno', 'Plaćeno');
CREATE TYPE status_rezervacije_enum AS ENUM ('Čeka potvrdu', 'Potvrđeno', 'Otkazano');

-- 1. Tablica Korisnik
CREATE TABLE Korisnik (
    korisnik_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    ime VARCHAR(50) NOT NULL,
    prezime VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    uloga uloga_enum NOT NULL
);

-- 2. Tablica Ponuda
CREATE TABLE Ponuda (
    ponuda_id SERIAL PRIMARY KEY,
    naziv VARCHAR(100) NOT NULL,
    opis TEXT,
    cijena DECIMAL(10,2) NOT NULL,
    kategorija kategorija_enum NOT NULL
);

-- 3. Tablica Prostor (specijalizacija Ponude)
CREATE TABLE Prostor (
    prostor_id INT PRIMARY KEY,
    adresa TEXT NOT NULL,
    kapacitet INT NOT NULL,
    CONSTRAINT fk_prostor_ponuda FOREIGN KEY (prostor_id) REFERENCES Ponuda(ponuda_id) ON DELETE CASCADE,
    CONSTRAINT chk_prostor_kategorija CHECK (
        prostor_id IN (SELECT ponuda_id FROM Ponuda WHERE kategorija = 'Prostor')
    )
);

-- 4. Tablica Dogadjaj
CREATE TABLE Dogadjaj (
    dogadjaj_id SERIAL PRIMARY KEY,
    naziv VARCHAR(100) NOT NULL,
    opis TEXT,
    korisnik_id INT NOT NULL,
    prostor_id INT NOT NULL,
    FOREIGN KEY (korisnik_id) REFERENCES Korisnik(korisnik_id) ON DELETE CASCADE,
    FOREIGN KEY (prostor_id) REFERENCES Prostor(prostor_id) ON DELETE CASCADE
    -- Constraint da kreira samo organizator ➔ TRIGGER će kasnije ovo provjeriti
);

-- 5. Tablica DogadjajPonuda (M:N veza između Dogadjaj i Ponuda)
CREATE TABLE DogadjajPonuda (
    dogadjaj_id INT NOT NULL,
    ponuda_id INT NOT NULL,
    PRIMARY KEY (dogadjaj_id, ponuda_id),
    FOREIGN KEY (dogadjaj_id) REFERENCES Dogadjaj(dogadjaj_id) ON DELETE CASCADE,
    FOREIGN KEY (ponuda_id) REFERENCES Ponuda(ponuda_id) ON DELETE CASCADE
);

-- 6. Tablica Slika (slike događaja)
CREATE TABLE Slika (
    slika_id SERIAL PRIMARY KEY,
    url TEXT NOT NULL,
    dogadjaj_id INT NOT NULL,
    FOREIGN KEY (dogadjaj_id) REFERENCES Dogadjaj(dogadjaj_id) ON DELETE CASCADE
);

-- 7. Tablica Rezervacija
CREATE TABLE Rezervacija (
    rezervacija_id SERIAL PRIMARY KEY,
    korisnik_id INT NOT NULL,
    dogadjaj_id INT NOT NULL,
    datum_pocetka TIMESTAMP NOT NULL,
    datum_zavrsetka TIMESTAMP NOT NULL,
    ukupna_cijena DECIMAL(10,2) NOT NULL,
    posebni_zahtjevi TEXT,
    status status_rezervacije_enum DEFAULT 'Čeka potvrdu',
    status_placanja status_placanja_enum DEFAULT 'Nije plaćeno',
    FOREIGN KEY (korisnik_id) REFERENCES Korisnik(korisnik_id) ON DELETE CASCADE,
    FOREIGN KEY (dogadjaj_id) REFERENCES Dogadjaj(dogadjaj_id) ON DELETE CASCADE
);

-- 8. Tablica Gost (lista gostiju za rezervaciju)
CREATE TABLE Gost (
    gost_id SERIAL PRIMARY KEY,
    rezervacija_id INT NOT NULL,
    ime VARCHAR(50) NOT NULL,
    prezime VARCHAR(50),
    email VARCHAR(100),
    FOREIGN KEY (rezervacija_id) REFERENCES Rezervacija(rezervacija_id) ON DELETE CASCADE
);

-- 9. Trigger da spriječi kreiranje događaja od strane korisnika koji nije "Organizator"
CREATE OR REPLACE FUNCTION check_organizator() RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT uloga FROM Korisnik WHERE korisnik_id = NEW.korisnik_id) <> 'Organizator' THEN
        RAISE EXCEPTION 'Samo korisnik s ulogom Organizator može kreirati događaj.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_check_organizator
BEFORE INSERT ON Dogadjaj
FOR EACH ROW
EXECUTE FUNCTION check_organizator();

